package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import pebbleclient "github.com/t11e/go-pebbleclient"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Delete provides a mock function with given fields: path, opts, result
func (_m *Client) Delete(path string, opts *pebbleclient.RequestOptions, result interface{}) error {
	ret := _m.Called(path, opts, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *pebbleclient.RequestOptions, interface{}) error); ok {
		r0 = rf(path, opts, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Do provides a mock function with given fields: path, opts, method, body, result
func (_m *Client) Do(path string, opts *pebbleclient.RequestOptions, method string, body io.Reader, result interface{}) error {
	ret := _m.Called(path, opts, method, body, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *pebbleclient.RequestOptions, string, io.Reader, interface{}) error); ok {
		r0 = rf(path, opts, method, body, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: path, opts, result
func (_m *Client) Get(path string, opts *pebbleclient.RequestOptions, result interface{}) error {
	ret := _m.Called(path, opts, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *pebbleclient.RequestOptions, interface{}) error); ok {
		r0 = rf(path, opts, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOptions provides a mock function with given fields:
func (_m *Client) GetOptions() pebbleclient.Options {
	ret := _m.Called()

	var r0 pebbleclient.Options
	if rf, ok := ret.Get(0).(func() pebbleclient.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pebbleclient.Options)
	}

	return r0
}

// Head provides a mock function with given fields: path, opts
func (_m *Client) Head(path string, opts *pebbleclient.RequestOptions) error {
	ret := _m.Called(path, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *pebbleclient.RequestOptions) error); ok {
		r0 = rf(path, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Post provides a mock function with given fields: path, opts, body, result
func (_m *Client) Post(path string, opts *pebbleclient.RequestOptions, body io.Reader, result interface{}) error {
	ret := _m.Called(path, opts, body, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *pebbleclient.RequestOptions, io.Reader, interface{}) error); ok {
		r0 = rf(path, opts, body, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: path, opts, body, result
func (_m *Client) Put(path string, opts *pebbleclient.RequestOptions, body io.Reader, result interface{}) error {
	ret := _m.Called(path, opts, body, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *pebbleclient.RequestOptions, io.Reader, interface{}) error); ok {
		r0 = rf(path, opts, body, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithOptions provides a mock function with given fields: opts
func (_m *Client) WithOptions(opts pebbleclient.Options) pebbleclient.Client {
	ret := _m.Called(opts)

	var r0 pebbleclient.Client
	if rf, ok := ret.Get(0).(func(pebbleclient.Options) pebbleclient.Client); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pebbleclient.Client)
		}
	}

	return r0
}
